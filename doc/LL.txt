<program> -> <block_contents>

<block_contents> -> <block_content> <block_contents>
<block_contents> -> ε

<block_content> -> var Identifier <type_opt> <def_var>
<block_content> -> let Identifier <type_opt> <def_var>
<block_content> -> <function_definition>
<block_content> -> <function_call>
<block_content> -> ε

<type_opt> -> : <type>
<type_opt> -> ε

<def_var> -> = <def_value>
<def_var> -> ε

<def_value> -> <expression>
<def_value> -> <function_call>
<def_value> -> ε

<type> -> Int |  Double | String | Int? | Double? | String?

<function_definition> -> func Identifier ( <parameter_list> ) <return_type_opt> <function_body>

<parameter_list> -> <parameter_definition> <parameter_list_tail>
<parameter_list> -> ε

<parameter_list_tail> -> , <parameter_definition> <parameter_list_tail>
<parameter_list_tail> -> ε

<parameter_definition> -> Identifier : <type>
<parameter_definition> -> _ : <type>

<return_type> -> <type>

<return_type_opt> -> -> <return_type>
<return_type_opt> -> ε

<function_body> -> { <statement_list> }

<statement_list> -> <statement> <statement_list>
<statement_list> -> ε
<statement> -> if <expression> { <statement_list> } else { <statement_list> }
<statement> -> if let Identifier { <statement_list> } else { <statement_list> }
<statement> -> while <expression> { <statement_list> }
<statement> -> Identifier = <function_call>
<statement> -> return <expression> ?? <statement_return>
<statement> -> var Identifier <type_opt> <def_var>
<statement> -> let Identifier <type_opt> <def_var>
<statement_return> -> return <expression>
<statement_return> -> return
<statement_return> -> ε

<function_call> -> Identifier ( <input_parameters> )

<input_parameters> -> <term> <input_parameters_tail>

<input_parameters_tail> -> , <term> <input_parameters_tail>
<input_parameters_tail> -> ε

<term> -> Identifier
<term> -> <expression>
<term> -> ε